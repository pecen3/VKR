-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.categories
(
    id bigint NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT category_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.competitor_price_history
(
    id serial NOT NULL,
    competitor_product_id uuid NOT NULL,
    time_stamp timestamp(0) without time zone NOT NULL,
    price bigint NOT NULL,
    CONSTRAINT competitor_price_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.competitor_products
(
    id uuid NOT NULL,
    url text COLLATE pg_catalog."default" NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    price bigint NOT NULL,
    our_product_id uuid,
    competitor_id uuid,
    updated_at timestamp(0) without time zone,
    CONSTRAINT competitor_products_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.competitors
(
    id uuid NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT competitor_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.our_price_history
(
    id serial NOT NULL,
    our_product_id uuid NOT NULL,
    time_stamp timestamp(0) without time zone NOT NULL,
    price bigint NOT NULL,
    CONSTRAINT our_price_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.parser
(
    id serial NOT NULL,
    site text COLLATE pg_catalog."default",
    html_title text COLLATE pg_catalog."default",
    html_price text COLLATE pg_catalog."default",
    CONSTRAINT parser_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.price_rules
(
    id serial NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    rule text COLLATE pg_catalog."default",
    CONSTRAINT price_rules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.store_products
(
    id uuid NOT NULL,
    ym_id bigint NOT NULL,
    url text COLLATE pg_catalog."default" NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    image text COLLATE pg_catalog."default" NOT NULL,
    category_id bigint,
    price bigint NOT NULL,
    rec_price bigint,
    min_price bigint,
    updated_at timestamp(0) without time zone,
    rule_id serial,
    CONSTRAINT store_products_pkey PRIMARY KEY (id),
    CONSTRAINT store_products_ym_id_unique UNIQUE (ym_id)
);

CREATE TABLE IF NOT EXISTS public.user_info
(
    login text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    company_id text COLLATE pg_catalog."default",
    api_key text COLLATE pg_catalog."default",
    sync_period integer,
    reprice_period integer
);

ALTER TABLE IF EXISTS public.competitor_price_history
    ADD CONSTRAINT competitor_price_history_competitor_product_id_fkey FOREIGN KEY (competitor_product_id)
    REFERENCES public.competitor_products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.competitor_products
    ADD CONSTRAINT competitor_products_competitior_id_foreign FOREIGN KEY (competitor_id)
    REFERENCES public.competitors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.competitor_products
    ADD CONSTRAINT competitor_products_our_porduct_id_foreign FOREIGN KEY (our_product_id)
    REFERENCES public.store_products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.our_price_history
    ADD CONSTRAINT our_price_history_our_product_id_fkey FOREIGN KEY (our_product_id)
    REFERENCES public.store_products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.store_products
    ADD CONSTRAINT fk_rule_id FOREIGN KEY (rule_id)
    REFERENCES public.price_rules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.store_products
    ADD CONSTRAINT store_products_category_id_foreign FOREIGN KEY (category_id)
    REFERENCES public.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


INSERT INTO public.parser (site, html_title, html_price)
VALUES
  ('market.yandex.ru', 'h1[data-auto=''productCardTitle'']', 'div[data-zone-name=''cpa-offer'']@data-zone-data'),
  ('ozon.ru', 'h1.lw5', 'span.vl5.v3l'),
  ('wildberries.ru', 'h1.product-page__title', 'span.price-block__wallet-price');



  INSERT INTO public.price_rules ( description, rule)
VALUES
  ('Без правила', NULL),
  ('Минимальная цена + 10%', 'min + min * 0.10'),
  ('Текущая цена или минимальная цена конкурентов, если она ниже', '(currentPrice < min) ? min : currentPrice'),
  ('Средняя цена конкурентов + 10% или минимальная цена, если она выше', '(avg + avg * 0.1 < min) ? min : avg + avg * 0.1'),
  ('Медианная цена конкурентов + 5% или максимальная цена, если она ниже', '(median + median * 0.05 > max) ? max : median + median * 0.05'),
  ('Минимальная цена конкурентов + 15% или себестоимость + 10%, если она выше', '(min + min * 0.15 < cost + cost * 0.1) ? cost + cost * 0.1 : min + min * 0.15'),
  ('Средняя цена', 'avg'),
  ('Минимальная цена среди всех', 'min - 1');


CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_store_products_updated_at
AFTER UPDATE OF price ON store_products
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at();

CREATE TRIGGER update_comp_products_updated_at
AFTER UPDATE OF price ON competitor_products
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at();

END;